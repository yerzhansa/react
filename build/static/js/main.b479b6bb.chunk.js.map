{"version":3,"sources":["components/ChatItem/styles.module.css","components/MessageItem/styles.module.css","components/ChatList/styles.module.css","components/Avatar/styles.module.css","components/Chat/styles.module.css","components/Avatar/Avatar.tsx","components/ChatItem/ChatItem.tsx","components/ChatList/ChatList.tsx","components/MessageItem/MessageItem.tsx","components/MessageList/MessageList.tsx","components/Chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Avatar","imageLink","alt","className","s","imageWrapper","src","ChatItem","id","name","lastMessageDate","lastMessageAuthor","lastMessage","handleClickOnChat","isChatSelected","selectedChatId","onClick","item","selected","content","meta","date","Date","toLocaleDateString","message","author","ChatList","chats","list","sort","a","b","timeA","getTime","map","key","MessageItem","userName","userAvatar","toLocaleTimeString","MessageList","messages","length","Chat","useState","setSelectedChatId","chatMessages","setChatMessages","useEffect","m","allMessages","find","chatId","root","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b479b6bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__2L84A\",\"selected\":\"styles_selected__3qeOQ\",\"content\":\"styles_content__1HeXs\",\"meta\":\"styles_meta__XU1MK\",\"message\":\"styles_message__1e8vP\",\"name\":\"styles_name__Of3X3\",\"date\":\"styles_date__23JaP\",\"author\":\"styles_author__sMBci\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__RJX9_\",\"content\":\"styles_content__AHTIs\",\"meta\":\"styles_meta__15Amc\",\"name\":\"styles_name__2amu3\",\"date\":\"styles_date__29ucj\",\"message\":\"styles_message__3WSsJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__1fHhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageWrapper\":\"styles_imageWrapper__3rH6h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__25LAg\"};","import React from 'react'\nimport s from './styles.module.css'\nimport { Props } from './types'\n\nconst Avatar: Props = ({ imageLink, alt }) => {\n  return (\n    <div className={s.imageWrapper}>\n      <img src={imageLink} alt={alt} />\n    </div>\n  )\n}\n\nexport default Avatar\n","import React from 'react'\nimport s from './styles.module.css'\nimport { Props } from './types'\nimport Avatar from '../Avatar'\n\nconst ChatItem: Props = ({\n  id,\n  name,\n  imageLink,\n  lastMessageDate,\n  lastMessageAuthor,\n  lastMessage,\n  handleClickOnChat,\n  selectedChatId,\n}) => {\n  const isChatSelected = selectedChatId === id\n\n  return (\n    <li\n      onClick={handleClickOnChat(id)}\n      className={`${s.item} ${isChatSelected ? `${s.selected}` : ''}`}\n    >\n      <Avatar imageLink={imageLink} alt={name} />\n      <div className={s.content}>\n        <div className={s.meta}>\n          <div className={s.name}>{name}</div>\n          <div className={s.date}>\n            {new Date(lastMessageDate).toLocaleDateString()}\n          </div>\n        </div>\n        <div className={s.message}>\n          <div className={s.author}>{lastMessageAuthor}:</div>\n          <div>{lastMessage}</div>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default ChatItem\n","import React from 'react'\nimport { Props } from './types'\nimport s from './styles.module.css'\nimport ChatItem from '../ChatItem'\nimport { IChat } from '../ChatItem/types'\n\nconst ChatList: Props = ({ chats, handleClickOnChat, selectedChatId }) => {\n  const compareFn = (a: IChat, b: IChat) => {\n    const timeA = new Date(a.lastMessageDate).getTime()\n    const timeB = new Date(b.lastMessageDate).getTime()\n    return timeB - timeA\n  }\n\n  const mapChats = ({\n    id,\n    name,\n    imageLink,\n    lastMessage,\n    lastMessageAuthor,\n    lastMessageDate,\n  }: IChat) => (\n    <ChatItem\n      key={id}\n      selectedChatId={selectedChatId}\n      handleClickOnChat={handleClickOnChat}\n      {...{\n        id,\n        name,\n        imageLink,\n        lastMessage,\n        lastMessageAuthor,\n        lastMessageDate,\n      }}\n    />\n  )\n\n  return <ul className={s.list}>{chats.sort(compareFn).map(mapChats)}</ul>\n}\n\nexport default ChatList\n","import React from 'react'\nimport { Props } from './types'\nimport s from './styles.module.css'\nimport Avatar from '../Avatar'\n\nconst MessageItem: Props = ({ userName, userAvatar, date, message }) => {\n  return (\n    <li className={s.item}>\n      <Avatar imageLink={userAvatar} alt={userName} />\n      <div className={s.content}>\n        <div className={s.meta}>\n          <div className={s.name}>{userName}</div>\n          <div className={s.date}>{new Date(date).toLocaleTimeString()}</div>\n        </div>\n        <div className={s.message}>\n          <div>{message}</div>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default MessageItem\n","import React from 'react'\nimport { Props } from './types'\nimport MessageItem from '../MessageItem'\n\nconst MessageList: Props = ({ messages }) => {\n  return (\n    <ul>\n      {messages.length > 0 ? (\n        messages.map(({ id, userName, userAvatar, message, date }) => (\n          <MessageItem\n            key={id}\n            id={id}\n            userName={userName}\n            userAvatar={userAvatar}\n            message={message}\n            date={date}\n          />\n        ))\n      ) : (\n        <h2>Select a chat to start messaging</h2>\n      )}\n    </ul>\n  )\n}\n\nexport default MessageList\n","import React, { useEffect, useState } from 'react'\nimport ChatList from '../ChatList'\nimport chats from '../../mocks/chat/chatList.json'\nimport allMessages from '../../mocks/chat/messageList.json'\nimport MessageList from '../MessageList'\nimport { IMessage } from '../MessageItem/types'\nimport s from './styles.module.css'\n\nconst Chat = () => {\n  const [selectedChatId, setSelectedChatId] = useState<number>()\n  const [chatMessages, setChatMessages] = useState<IMessage[]>([])\n\n  useEffect(() => {\n    const m = allMessages.find(({ chatId }) => selectedChatId === chatId)\n    if (m) setChatMessages(m.messages)\n  }, [selectedChatId])\n\n  const handleClickOnChat = (id: number) => () => {\n    setSelectedChatId(id)\n  }\n\n  return (\n    <div className={s.root}>\n      <ChatList\n        handleClickOnChat={handleClickOnChat}\n        selectedChatId={selectedChatId}\n        chats={chats}\n      />\n      <MessageList messages={chatMessages} />\n    </div>\n  )\n}\n\nexport default Chat\n","import React from 'react'\nimport Chat from './components/Chat'\n\nconst App = () => <Chat />\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}